// संस्कृत-असेंबलर (न्यूनतम) — VM-बाइटकोड-उत्पादक
// समर्थित म्नेमोनिक्स्: निक्षिप <संख्या|"लेख्य">, योजय, अपसारय, गुणय, भागय, लेखय, निरोधित,
//                        गच्छ <लेबल>, यदि-गच्छ-सम <लेबल>, यदि-गच्छ-असम <लेबल>
// निर्देशाः: .पाठ, .दत्त (उपेक्षितम् v0), .प्रवेश <लेबल>, .अन्त

संरचना लेखन {
  कोड: सूची<अष्टक>
}

कार्य आरम्भ_लेखन(): लेखन { लौटय लेखन{कोड: []} }
कार्य लिख_बाइट(ल:&लेखन, ब: अष्टक): शून्य { जोड़ो(ल.कोड, ब) }
कार्य लिख_u32(ल:&लेखन, व: पूर्ण64): शून्य {
  लिख_बाइट(ल, (व      ) & 0xFF)
  लिख_बाइट(ल, (व >> 8 ) & 0xFF)
  लिख_बाइट(ल, (व >> 16) & 0xFF)
  लिख_बाइट(ल, (व >> 24) & 0xFF)
}
कार्य लिख_i64(ल:&लेखन, व: पूर्ण64): शून्य {
  लिख_बाइट(ल, (व      ) & 0xFF)
  लिख_बाइट(ल, (व >> 8 ) & 0xFF)
  लिख_बाइट(ल, (व >> 16) & 0xFF)
  लिख_बाइट(ल, (व >> 24) & 0xFF)
  लिख_बाइट(ल, (व >> 32) & 0xFF)
  लिख_बाइट(ल, (व >> 40) & 0xFF)
  लिख_बाइट(ल, (व >> 48) & 0xFF)
  लिख_बाइट(ल, (व >> 56) & 0xFF)
}
कार्य लिख_i32(ल:&लेखन, व: पूर्ण64): शून्य { लिख_u32(ल, व) }
कार्य स्थान(ल:&लेखन): पूर्ण64 { लौटय दीर्घता(ल.कोड) }
कार्य पैच_i32(ल:&लेखन, सू: पूर्ण64, व: पूर्ण64): शून्य {
  ल.कोड[सू+0] = (व      ) & 0xFF
  ल.कोड[सू+1] = (व >> 8 ) & 0xFF
  ल.कोड[सू+2] = (व >> 16) & 0xFF
  ल.कोड[सू+3] = (व >> 24) & 0xFF
}

// देवनागरी-अङ्क-परिचयः
कार्य देव_अंक(च: अक्षर): तर्क { लौटय (च >= '०' और च <= '९') या (च == '_') }
कार्य देव_पाठ्य_से_पूर्ण(स: श्रृंखला): पूर्ण64 {
  मान: पूर्ण64 = 0
  सू = 0
  जबतक (सू < दीर्घता(स)) {
    च = स[सू]
    यदि (च == '_') { सू = सू + 1; जारी }
    यदि (च < '०' या च > '९') { टूटो }
    अंक = (च - '०')
    मान = मान * 10 + अंक
    सू = सू + 1
  }
  लौटय मान
}

कार्य लेख्य_आदेश(ल:&लेखन, स: श्रृंखला): शून्य {
  लिख_बाइट(ल, 0x12)           // PUSH_S
  लिख_u32(ल, दीर्घता_बाइट(s))
  सू = 0
  जबतक (सू < दीर्घता_बाइट(s)) { लिख_बाइट(ल, बाइट_पर(s, सू)); सू = सू + 1 }
}
कार्य पूर्ण_आदेश(ल:&लेखन, व: पूर्ण64): शून्य {
  लिख_बाइट(ल, 0x10)           // PUSH_I
  लिख_i64(ल, व)
}

// असेंबलर — द्वि-पर्यायः (labels → addresses)
कार्य असेंबल_से_कोड(स्रोत: श्रृंखला): सूची<अष्टक> {
  पंक्तयः = विभज(स्रोत, "\n")
  ल = आरम्भ_लेखन()
  लेबल_स्थान: मानचित्र<श्रृंखला, पूर्ण64> = {}
  लंबित_कूद: सूची<त्रय<पूर्ण64, श्रृंखला, अष्टक>> = [] // (patch_loc, label, opcode)

  कार्य शुद्ध(पंक्ति: श्रृंखला): श्रृंखला {
    // टिप्पण्यः `//` पर छिन्ना; किन्तु उद्धरण-भीतः न छिन्द्यताम् (सरलतया: प्रथम `//` पर्यन्तम्)
    स्थ = सूच्य(पंक्ति, "//")
    यदि (स्थ >= 0) { लौटय उपस्ट्रिंग(पंक्ति, 0, स्थ) } अन्यथा { लौटय पंक्ति }
  }

  // प्रथम-पर्यायः: लेबल-संग्रहः एवं अनुमानित-आकारः
  सू = 0
  जबकि (सू < दीर्घता(पंक्तयः)) {
    र = शुद्ध(पंक्तयः[सू]).छिन्()
    यदि (दीर्घता(र) == 0) { सू = सू + 1; जारी }
    // निर्देशाः
    यदि (आरम्भ_सम(र, ".")) { सू = सू + 1; जारी }
    // लेबलः
    यदि (अन्त_सम(र, ":")) {
      नाम = उपस्ट्रिंग(र, 0, दीर्घता(र)-1).छिन्()
      लेबल_स्थान[नाम] = स्थान(&ल)
      सू = सू + 1
      जारी
    }
    // आदेश-परिमाण-अनुमानः (सरल)
    यदि (आरम्भ_सम(र, "निक्षिप ")) {
      अवश = उपस्ट्रिंग(र, 8, दीर्घता(र)).छिन्()
      यदि (दीर्घता(अवश) > 0 और अवश[0] == '"') { लिख_बाइट(&ल, 0x12); लिख_u32(&ल, 0); /*bytes later*/ }
      अन्यथा { लिख_बाइट(&ल, 0x10); लिख_i64(&ल, 0) }
    } अन्यथा यदि (र == "योजय") { लिख_बाइट(&ल, 0x20) }
      अन्यथा यदि (र == "अपसारय") { लिख_बाइट(&ल, 0x21) }
      अन्यथा यदि (र == "गुणय") { लिख_बाइट(&ल, 0x22) }
      अन्यथा यदि (र == "भागय") { लिख_बाइट(&ल, 0x23) }
      अन्यथा यदि (आरम्भ_सम(र, "गच्छ ")) { लिख_बाइट(&ल, 0x50); लिख_i32(&ल, 0) }
      अन्यथा यदि (आरम्भ_सम(र, "यदि-गच्छ-सम ")) { लिख_बाइट(&ल, 0x51); लिख_i32(&ल, 0) }
      अन्यथा यदि (आरम्भ_सम(र, "यदि-गच्छ-असम ")) { लिख_बाइट(&ल, 0x52); लिख_i32(&ल, 0) }
      अन्यथा यदि (र == "लेखय") { लिख_बाइट(&ल, 0x30) }
      अन्यथा यदि (र == "निरोधित") { लिख_बाइट(&ल, 0x01) }
    सू = सू + 1
  }

  // द्वितीय-पर्यायः: वास्तविक-लेखनम्
  कोड = [] // reset
  ल = आरम्भ_लेखन()
  सू = 0
  जबकि (सू < दीर्घता(पंक्तयः)) {
    रॉ = पंक्तयः[सू]
    र = शुद्ध(रॉ).छिन्()
    यदि (दीर्घता(र) == 0) { सू = सू + 1; जारी }
    यदि (आरम्भ_सम(र, ".")) { सू = सू + 1; जारी }
    यदि (अन्त_सम(र, ":")) { सू = सू + 1; जारी }

    यदि (आरम्भ_सम(र, "निक्षिप ")) {
      अवश = उपस्ट्रिंग(र, 8, दीर्घता(र)).छिन्()
      यदि (दीर्घता(अवश) > 0 और अवश[0] == '"') {
        // स्ट्रिङ्
        आर = सूच्य(रॉ, '"'); अन्त = सूच्य_अनन्त(रॉ, '"')
        लेख = उपस्ट्रिंग(रॉ, आर+1, अन्त)
        लेख्य_आदेश(&ल, लेख)
      } अन्यथा {
        सं = देव_पाठ्य_से_पूर्ण(अवश)
        पूर्ण_आदेश(&ल, सं)
      }
      सू = सू + 1; जारी
    }
    यदि (र == "योजय") { लिख_बाइट(&ल, 0x20); सू = सू + 1; जारी }
    यदि (र == "अपसारय") { लिख_बाइट(&ल, 0x21); सू = सू + 1; जारी }
    यदि (र == "गुणय") { लिख_बाइट(&ल, 0x22); सू = सू + 1; जारी }
    यदि (र == "भागय") { लिख_बाइट(&ल, 0x23); सू = सू + 1; जारी }
    यदि (र == "लेखय") { लिख_बाइट(&ल, 0x30); सू = सू + 1; जारी }
    यदि (र == "निरोधित") { लिख_बाइट(&ल, 0x01); सू = सू + 1; जारी }

    यदि (आरम्भ_सम(र, "गच्छ ")) {
      नाम = उपस्ट्रिंग(र, 6, दीर्घता(र)).छिन्()
      लिख_बाइट(&ल, 0x50)
      पै = स्थान(&ल)
      लिख_i32(&ल, 0)
      जोड़ो(लंबित_कूद, (पै, नाम, 0x50))
      सू = सू + 1; जारी
    }
    यदि (आरम्भ_सम(र, "यदि-गच्छ-सम ")) {
      नाम = उपस्ट्रिंग(र, 14, दीर्घता(र)).छिन्()
      लिख_बाइट(&ल, 0x51)
      पै = स्थान(&ल)
      लिख_i32(&ल, 0)
      जोड़ो(लंबित_कूद, (पै, नाम, 0x51))
      सू = सू + 1; जारी
    }
    यदि (आरम्भ_सम(र, "यदि-गच्छ-असम ")) {
      नाम = उपस्ट्रिंग(र, 16, दीर्घता(र)).छिन्()
      लिख_बाइट(&ल, 0x52)
      पै = स्थान(&ल)
      लिख_i32(&ल, 0)
      जोड़ो(लंबित_कूद, (पै, नाम, 0x52))
      सू = सू + 1; जारी
    }
    // अपरिचितम्: उपेक्षितम् (बाल-सरलीकरणम्)
    सू = सू + 1
  }

  // लेबल-पैच
  प्रत्येक (ए) मध्ये लंबित_कूद {
    पै = ए.प्रथम; नाम = ए.द्वितीय; // opcode = ए.तृतीय
    यदि (नाम in लेबल_स्थान) {
      लक्ष्य = लेबल_स्थान[नाम]
      // rel32 = target - (after imm)
      ऑफ = (लक्ष्य - (पै + 4))
      पैच_i32(&ल, पै, ऑफ)
    }
  }

  लौटय ल.कोड
}


