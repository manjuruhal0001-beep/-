// संस्कृत बाइटकोड व्याख्याता — कंकाल (v0.1)

संरचना यंत्र {
  कोड: सूची<अष्टक>   // bytes
  कक्ष: सूची<मान>    // stack
  सूचक: पूर्ण64      // ip
  सारिणी: मानचित्र<पूर्ण64, मान> // प्रतीक-सारणि (डेमो)
  वापसी: सूची<पूर्ण64> // call stack
  मॉड्यूल: मानचित्र<श्रृंखला, मानचित्र<श्रृंखला, मान>> // loaded modules
}

गण मान_प्रकार { शून्य, पूर्ण, दशांश, लेख्य, तर्क }

संरचना मान { प्रकार: मान_प्रकार, पि: पूर्ण64, दि: दशांश, ले: श्रृंखला, त: तर्क, सूची: सूची<मान>, मानचित्र: मानचित्र<श्रृंखला, मान> }

कार्य आरम्भ_यंत्र(क: सूची<अष्टक>): यंत्र {
  लौटय यंत्र{कोड: क, कक्ष: [], सूचक: 0, सारिणी: {}, वापसी: [], मॉड्यूल: {}}
}

कार्य पठ(य: &यंत्र): अष्टक {
  ब = य.कोड[य.सूचक]
  य.सूचक = य.सूचक + 1
  लौटय ब
}

कार्य पठ_i64(य: &यंत्र): पूर्ण64 { // लिटिल-एंडियन
  v0 = पठ(य); v1 = पठ(य); v2 = पठ(य); v3 = पठ(य); v4 = पठ(य); v5 = पठ(य); v6 = पठ(य); v7 = पठ(य)
  लौटय (पूर्ण64)v0 | ((पूर्ण64)v1<<8) | ((पूर्ण64)v2<<16) | ((पूर्ण64)v3<<24) | ((पूर्ण64)v4<<32) | ((पूर्ण64)v5<<40) | ((पूर्ण64)v6<<48) | ((पूर्ण64)v7<<56)
}

कार्य पठ_u32(य: &यंत्र): पूर्ण64 {
  v0 = पठ(य); v1 = पठ(य); v2 = पठ(य); v3 = पठ(य)
  लौटय (पूर्ण64)v0 | ((पूर्ण64)v1<<8) | ((पूर्ण64)v2<<16) | ((पूर्ण64)v3<<24)
}

कार्य धकेलो(य:&यंत्र, म: मान): शून्य { जोड़ो(य.कक्ष, म) }

कार्य निक्षिप्त(य:&यंत्र): मान {
  म = अन्तिम(य.कक्ष)
  हटाओ_अन्तिम(य.कक्ष)
  लौटय म
}

कार्य चलाओ(य:&यंत्र): शून्य {
  जबकि (सत्य) {
    ऑप = पठ(य)
    यदि (ऑप == 0x00) { जारी }        // NOP
    यदि (ऑप == 0x01) { टूटो }        // HALT
    यदि (ऑप == 0x10) { व = पठ_i64(य); धकेलो(य, मान{प्रकार: पूर्ण, पि: व}) ; जारी }
    यदि (ऑप == 0x12) { ल = पठ_u32(य); स = पठ_श्रृंखला(य, ल); धकेलो(य, मान{प्रकार: लेख्य, ले: स}); जारी }
    यदि (ऑप == 0x20) { द = निक्षिप्त(य); व = निक्षिप्त(य); धकेलो(य, मान{प्रकार: पूर्ण, पि: व.пि + द.пि}); जारी }
    यदि (ऑप == 0x24) { द = निक्षिप्त(य); व = निक्षिप्त(य); धकेलो(य, मान{प्रकार: लेख्य, ले: व.ले + द.ले}); जारी }
    यदि (ऑप == 0x30) { म = निक्षिप्त(य); प्रदर्शय(म); जारी }
    यदि (ऑप == 0x40) { द = निक्षिप्त(य); व = निक्षिप्त(य); धकेलो(य, मान{प्रकार: तर्क, त: व.пि < द.пि}); जारी }
    यदि (ऑप == 0x50) { ऑफ0 = पठ(य); ऑफ1 = पठ(य); ऑफ2 = पठ(य); ऑफ3 = पठ(य); ऑफ = (पूर्ण64)((पूर्ण64)ऑफ0 | (ऑफ1<<8) | (ऑफ2<<16) | (ऑफ3<<24)); य.सूचक = (पूर्ण64)(य.सूचक + (पूर्ण64)(पूर्ण64)ऑफ); जारी }
    यदि (ऑप == 0x51) { ऑफ0 = पठ(य); ऑफ1 = पठ(य); ऑफ2 = पठ(य); ऑफ3 = पठ(य); ऑफ = (पूर्ण64)((पूर्ण64)ऑफ0 | (ऑफ1<<8) | (ऑफ2<<16) | (ऑफ3<<24)); म = निक्षिप्त(य); यदि (!म.त) { य.सूचक = (पूर्ण64)(य.सूचक + (पूर्ण64)ऑफ) } ; जारी }
    यदि (ऑप == 0x60) { म = अन्तिम(य.कक्ष); धकेलो(य, म); जारी }
    यदि (ऑप == 0x61) { _ = निक्षिप्त(य); जारी }
    यदि (ऑप == 0x70) { आई0 = पठ(य); आई1=पठ(य); आई2=पठ(य); आई3=पठ(य); आई = (पूर्ण64)(आई0 | (आई1<<8) | (आई2<<16) | (आई3<<24)); म = निक्षिप्त(य); य.सारिणी[आई] = म; जारी }
    यदि (ऑप == 0x71) { आई0 = पठ(य); आई1=पठ(य); आई2=पठ(य); आई3=पठ(य); आई = (पूर्ण64)(आई0 | (आई1<<8) | (आई2<<16) | (आई3<<24)); म = य.सारिणी[आई]; धकेलो(य, म); जारी }
    यदि (ऑप == 0x80) { a0=पठ(य);a1=पठ(य);a2=पठ(य);a3=पठ(य); एड = (पूर्ण64)(a0 | (a1<<8) | (a2<<16) | (a3<<24)); जोड़ो(य.वापसी, य.सूचक); य.सूचक = एड; जारी }
    यदि (ऑप == 0x81) { पूर्व = अन्तिम(य.वापसी); हटाओ_अन्तिम(य.वापसी); य.सूचक = पूर्व; जारी }
    यदि (ऑप == 0x90) { ग0=पठ(य);ग1=पठ(य);ग2=पठ(य);ग3=पठ(य); ग = (पूर्ण64)(ग0 | (ग1<<8) | (ग2<<16) | (ग3<<24)); सूची = [] ; i=0; जबकि (i<ग) { तत्व = निक्षिप्त(य); जोड़ो(सूची, तत्व); i=i+1 } ; धकेलो(य, मान{प्रकार: शून्य, सूची: उलटा(सूची)}) ; जारी }
    यदि (ऑप == 0x91) { अ = अन्तिम(य.कक्ष); धकेलो(य, मान{प्रकार: पूर्ण, पि: दीर्घता(अ.सूची)}); जारी }
    यदि (ऑप == 0x92) { सूचि = निक्षिप्त(य); निर्देशांक = निक्षिप्त(य); धकेलो(य, सूचि.सूची[निर्देशांक.пि]); जारी }
    यदि (ऑप == 0xA0) { ग0=पठ(य);ग1=पठ(य);ग2=पठ(य);ग3=पठ(य); ग =(पूर्ण64)(ग0|(ग1<<8)|(ग2<<16)|(ग3<<24)); मप = {} ; i=0; जबकि(i<ग){ मान_ = निक्षिप्त(य); कुँजी = निक्षिप्त(य); मप[कुँजी.ले] = मान_; i=i+1 } ; धकेलो(य, मान{मानचित्र: मप}); जारी }
    यदि (ऑप == 0xA1) { कुँजी = निक्षिप्त(य); मप = निक्षिप्त(य); धकेलो(य, मप.मानचित्र[कुँजी.ले]); जारी }
    यदि (ऑप == 0xB0) { फाइलनाम = निक्षिप्त(य); सामग्री = फाइल_पढ़ो(फाइलनाम.ले); धकेलो(य, मान{प्रकार: लेख्य, ले: सामग्री}); जारी }
    यदि (ऑप == 0xB1) { सामग्री = निक्षिप्त(य); फाइलनाम = निक्षिप्त(य); फाइल_लिखो(फाइलनाम.ले, सामग्री.ले); जारी }
    यदि (ऑप == 0xC0) { मॉड्यूलनाम = निक्षिप्त(य); मॉड्यूल_लोड_करो(य, मॉड्यूलनाम.ले); जारी }
  }
}

कार्य पठ_श्रृंखला(य:&यंत्र, ल: पूर्ण64): श्रृंखला {
  // ल बाइट्स पढ़ो और UTF-8 मानो
  सं = ""
  सू = 0
  जबतक (सू < ल) { ब = पठ(य); सं = सं + ब_से_अक्षर(b); सू = सू + 1 }
  लौटय सं
}

कार्य प्रदर्शय(म: मान): शून्य {
  यदि (म.प्रकार == लेख्य) { देवानगरी_छाप(म.ले) }
  अन्यथा यदि (म.प्रकार == पूर्ण) { देवानगरी_छाप(संख्या_से_शृंखला(m.пि)) }
}

कार्य फाइल_पढ़ो(नाम: श्रृंखला): श्रृंखला {
  // डेमो: सरल फाइल पढ़ना (UTF-8)
  // वास्तविक कार्यान्वयन में OS सिस्टम कॉल का उपयोग करें
  लौटय "फाइल सामग्री: " + नाम
}

कार्य फाइल_लिखो(नाम: श्रृंखला, सामग्री: श्रृंखला): शून्य {
  // डेमो: सरल फाइल लिखना (UTF-8)
  // वास्तविक कार्यान्वयन में OS सिस्टम कॉल का उपयोग करें
  देवानगरी_छाप("फाइल लिखी: " + नाम + " → " + सामग्री)
}

कार्य मॉड्यूल_लोड_करो(य: &यंत्र, नाम: श्रृंखला): शून्य {
  // डेमो: सरल मॉड्यूल लोडिंग
  यदि (नाम in य.मॉड्यूल) { जारी } // already loaded
  // सिमुलेट करें: मॉड्यूल से कुछ फंक्शन्स लोड करना
  मॉड्यूल_सिम्बल्स: मानचित्र<श्रृंखला, मान> = {}
  यदि (नाम == "गणित") {
    मॉड्यूल_सिम्बल्स["योग"] = मान{प्रकार: लेख्य, ले: "योग_फंक्शन"}
    मॉड्यूल_सिम्बल्स["घट"] = मान{प्रकार: लेख्य, ले: "घट_फंक्शन"}
  } अन्यथा यदि (नाम == "स्ट्रिंग") {
    मॉड्यूल_सिम्बल्स["दीर्घता"] = मान{प्रकार: लेख्य, ले: "दीर्घता_फंक्शन"}
    मॉड्यूल_सिम्बल्स["जोड़"] = मान{प्रकार: लेख्य, ले: "जोड़_फंक्शन"}
  }
  य.मॉड्यूल[नाम] = मॉड्यूल_सिम्बल्स
  देवानगरी_छाप("मॉड्यूल लोड किया: " + नाम)
}


